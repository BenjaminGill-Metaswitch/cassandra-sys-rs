/* automatically generated by rust-bindgen */

pub type ptrdiff_t = i32;
pub type size_t =i32;
pub type wchar_t = i32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: i64,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Struct_Unnamed1 { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type Enum_Unnamed2 = u32;
pub const cass_false: u32 = 0;
pub const cass_true: u32 = 1;
pub type cass_bool_t = Enum_Unnamed2;
pub type cass_float_t = f32;
pub type cass_double_t = f64;
pub type cass_int8_t = i8;
pub type cass_uint8_t = u8;
pub type cass_int16_t = i16;
pub type cass_uint16_t = u16;
pub type cass_int32_t = i32;
pub type cass_uint32_t = u32;
pub type cass_int64_t = i64;
pub type cass_uint64_t = u64;
pub type cass_byte_t = cass_uint8_t;
pub type cass_duration_t = cass_uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CassInet_ {
    pub address: [cass_uint8_t; 16usize],
    pub address_length: cass_uint8_t,
}
impl ::std::clone::Clone for Struct_CassInet_ {
    fn clone(&self) -> Struct_CassInet_ { *self }
}
impl ::std::default::Default for Struct_CassInet_ {
    fn default() -> Struct_CassInet_ { unsafe { ::std::mem::zeroed() } }
}
pub type CassInet = Struct_CassInet_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CassUuid_ {
    pub time_and_version: cass_uint64_t,
    pub clock_seq_and_node: cass_uint64_t,
}
impl ::std::clone::Clone for Struct_CassUuid_ {
    fn clone(&self) -> Struct_CassUuid_ { *self }
}
impl ::std::default::Default for Struct_CassUuid_ {
    fn default() -> Struct_CassUuid_ { unsafe { ::std::mem::zeroed() } }
}
pub type CassUuid = Struct_CassUuid_;
pub enum Struct_CassCluster_ { }
pub type CassCluster = Struct_CassCluster_;
pub enum Struct_CassSession_ { }
pub type CassSession = Struct_CassSession_;
pub enum Struct_CassStatement_ { }
pub type CassStatement = Struct_CassStatement_;
pub enum Struct_CassBatch_ { }
pub type CassBatch = Struct_CassBatch_;
pub enum Struct_CassFuture_ { }
pub type CassFuture = Struct_CassFuture_;
pub enum Struct_CassPrepared_ { }
pub type CassPrepared = Struct_CassPrepared_;
pub enum Struct_CassResult_ { }
pub type CassResult = Struct_CassResult_;
pub enum Struct_CassIterator_ { }
pub type CassIterator = Struct_CassIterator_;
pub enum Struct_CassRow_ { }
pub type CassRow = Struct_CassRow_;
pub enum Struct_CassValue_ { }
pub type CassValue = Struct_CassValue_;
pub enum Struct_CassCollection_ { }
pub type CassCollection = Struct_CassCollection_;
pub enum Struct_CassSsl_ { }
pub type CassSsl = Struct_CassSsl_;
pub enum Struct_CassSchema_ { }
pub type CassSchema = Struct_CassSchema_;
pub enum Struct_CassSchemaMeta_ { }
pub type CassSchemaMeta = Struct_CassSchemaMeta_;
pub enum Struct_CassSchemaMetaField_ { }
pub type CassSchemaMetaField = Struct_CassSchemaMetaField_;
pub enum Struct_CassUuidGen_ { }
pub type CassUuidGen = Struct_CassUuidGen_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CassMetrics_ {
    pub requests: Struct_Unnamed3,
    pub stats: Struct_Unnamed4,
    pub errors: Struct_Unnamed5,
}
impl ::std::clone::Clone for Struct_CassMetrics_ {
    fn clone(&self) -> Struct_CassMetrics_ { *self }
}
impl ::std::default::Default for Struct_CassMetrics_ {
    fn default() -> Struct_CassMetrics_ { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub min: cass_uint64_t,
    pub max: cass_uint64_t,
    pub mean: cass_uint64_t,
    pub stddev: cass_uint64_t,
    pub median: cass_uint64_t,
    pub percentile_75th: cass_uint64_t,
    pub percentile_95th: cass_uint64_t,
    pub percentile_98th: cass_uint64_t,
    pub percentile_99th: cass_uint64_t,
    pub percentile_999th: cass_uint64_t,
    pub mean_rate: cass_double_t,
    pub one_minute_rate: cass_double_t,
    pub five_minute_rate: cass_double_t,
    pub fifteen_minute_rate: cass_double_t,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Struct_Unnamed3 { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub total_connections: cass_uint64_t,
    pub available_connections: cass_uint64_t,
    pub exceeded_pending_requests_water_mark: cass_uint64_t,
    pub exceeded_write_bytes_water_mark: cass_uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Struct_Unnamed4 { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub connection_timeouts: cass_uint64_t,
    pub pending_request_timeouts: cass_uint64_t,
    pub request_timeouts: cass_uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Struct_Unnamed5 { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type CassMetrics = Struct_CassMetrics_;
pub type Enum_CassConsistency_ = u32;
pub const CASS_CONSISTENCY_ANY: u32 = 0;
pub const CASS_CONSISTENCY_ONE: u32 = 1;
pub const CASS_CONSISTENCY_TWO: u32 = 2;
pub const CASS_CONSISTENCY_THREE: u32 = 3;
pub const CASS_CONSISTENCY_QUORUM: u32 = 4;
pub const CASS_CONSISTENCY_ALL: u32 = 5;
pub const CASS_CONSISTENCY_LOCAL_QUORUM: u32 = 6;
pub const CASS_CONSISTENCY_EACH_QUORUM: u32 = 7;
pub const CASS_CONSISTENCY_SERIAL: u32 = 8;
pub const CASS_CONSISTENCY_LOCAL_SERIAL: u32 = 9;
pub const CASS_CONSISTENCY_LOCAL_ONE: u32 = 10;
pub type CassConsistency = Enum_CassConsistency_;
pub type Enum_CassValueType_ = u32;
pub const CASS_VALUE_TYPE_UNKNOWN: u32 = 65535;
pub const CASS_VALUE_TYPE_CUSTOM: u32 = 0;
pub const CASS_VALUE_TYPE_ASCII: u32 = 1;
pub const CASS_VALUE_TYPE_BIGINT: u32 = 2;
pub const CASS_VALUE_TYPE_BLOB: u32 = 3;
pub const CASS_VALUE_TYPE_BOOLEAN: u32 = 4;
pub const CASS_VALUE_TYPE_COUNTER: u32 = 5;
pub const CASS_VALUE_TYPE_DECIMAL: u32 = 6;
pub const CASS_VALUE_TYPE_DOUBLE: u32 = 7;
pub const CASS_VALUE_TYPE_FLOAT: u32 = 8;
pub const CASS_VALUE_TYPE_INT: u32 = 9;
pub const CASS_VALUE_TYPE_TEXT: u32 = 10;
pub const CASS_VALUE_TYPE_TIMESTAMP: u32 = 11;
pub const CASS_VALUE_TYPE_UUID: u32 = 12;
pub const CASS_VALUE_TYPE_VARCHAR: u32 = 13;
pub const CASS_VALUE_TYPE_VARINT: u32 = 14;
pub const CASS_VALUE_TYPE_TIMEUUID: u32 = 15;
pub const CASS_VALUE_TYPE_INET: u32 = 16;
pub const CASS_VALUE_TYPE_LIST: u32 = 32;
pub const CASS_VALUE_TYPE_MAP: u32 = 33;
pub const CASS_VALUE_TYPE_SET: u32 = 34;
pub type CassValueType = Enum_CassValueType_;
pub type Enum_CassCollectionType_ = u32;
pub const CASS_COLLECTION_TYPE_LIST: u32 = 32;
pub const CASS_COLLECTION_TYPE_MAP: u32 = 33;
pub const CASS_COLLECTION_TYPE_SET: u32 = 34;
pub type CassCollectionType = Enum_CassCollectionType_;
pub type Enum_CassBatchType_ = u32;
pub const CASS_BATCH_TYPE_LOGGED: u32 = 0;
pub const CASS_BATCH_TYPE_UNLOGGED: u32 = 1;
pub const CASS_BATCH_TYPE_COUNTER: u32 = 2;
pub type CassBatchType = Enum_CassBatchType_;
pub type Enum_CassIteratorType_ = u32;
pub const CASS_ITERATOR_TYPE_RESULT: u32 = 0;
pub const CASS_ITERATOR_TYPE_ROW: u32 = 1;
pub const CASS_ITERATOR_TYPE_COLLECTION: u32 = 2;
pub const CASS_ITERATOR_TYPE_MAP: u32 = 3;
pub const CASS_ITERATOR_TYPE_SCHEMA_META: u32 = 4;
pub const CASS_ITERATOR_TYPE_SCHEMA_META_FIELD: u32 = 5;
pub type CassIteratorType = Enum_CassIteratorType_;
pub type Enum_CassSchemaMetaType_ = u32;
pub const CASS_SCHEMA_META_TYPE_KEYSPACE: u32 = 0;
pub const CASS_SCHEMA_META_TYPE_TABLE: u32 = 1;
pub const CASS_SCHEMA_META_TYPE_COLUMN: u32 = 2;
pub type CassSchemaMetaType = Enum_CassSchemaMetaType_;
pub type Enum_CassLogLevel_ = u32;
pub const CASS_LOG_DISABLED: u32 = 0;
pub const CASS_LOG_CRITICAL: u32 = 1;
pub const CASS_LOG_ERROR: u32 = 2;
pub const CASS_LOG_WARN: u32 = 3;
pub const CASS_LOG_INFO: u32 = 4;
pub const CASS_LOG_DEBUG: u32 = 5;
pub const CASS_LOG_TRACE: u32 = 6;
pub const CASS_LOG_LAST_ENTRY: u32 = 7;
pub type CassLogLevel = Enum_CassLogLevel_;
pub type Enum_CassSslVerifyFlags = u32;
pub const CASS_SSL_VERIFY_NONE: u32 = 0;
pub const CASS_SSL_VERIFY_PEER_CERT: u32 = 1;
pub const CASS_SSL_VERIFY_PEER_IDENTITY: u32 = 2;
pub type CassSslVerifyFlags = Enum_CassSslVerifyFlags;
pub type Enum_CassErrorSource_ = u32;
pub const CASS_ERROR_SOURCE_NONE: u32 = 0;
pub const CASS_ERROR_SOURCE_LIB: u32 = 1;
pub const CASS_ERROR_SOURCE_SERVER: u32 = 2;
pub const CASS_ERROR_SOURCE_SSL: u32 = 3;
pub const CASS_ERROR_SOURCE_COMPRESSION: u32 = 4;
pub type CassErrorSource = Enum_CassErrorSource_;
pub type Enum_CassError_ = u32;
pub const CASS_OK: u32 = 0;
pub const CASS_ERROR_LIB_BAD_PARAMS: u32 = 16777217;
pub const CASS_ERROR_LIB_NO_STREAMS: u32 = 16777218;
pub const CASS_ERROR_LIB_UNABLE_TO_INIT: u32 = 16777219;
pub const CASS_ERROR_LIB_MESSAGE_ENCODE: u32 = 16777220;
pub const CASS_ERROR_LIB_HOST_RESOLUTION: u32 = 16777221;
pub const CASS_ERROR_LIB_UNEXPECTED_RESPONSE: u32 = 16777222;
pub const CASS_ERROR_LIB_REQUEST_QUEUE_FULL: u32 = 16777223;
pub const CASS_ERROR_LIB_NO_AVAILABLE_IO_THREAD: u32 = 16777224;
pub const CASS_ERROR_LIB_WRITE_ERROR: u32 = 16777225;
pub const CASS_ERROR_LIB_NO_HOSTS_AVAILABLE: u32 = 16777226;
pub const CASS_ERROR_LIB_INDEX_OUT_OF_BOUNDS: u32 = 16777227;
pub const CASS_ERROR_LIB_INVALID_ITEM_COUNT: u32 = 16777228;
pub const CASS_ERROR_LIB_INVALID_VALUE_TYPE: u32 = 16777229;
pub const CASS_ERROR_LIB_REQUEST_TIMED_OUT: u32 = 16777230;
pub const CASS_ERROR_LIB_UNABLE_TO_SET_KEYSPACE: u32 = 16777231;
pub const CASS_ERROR_LIB_CALLBACK_ALREADY_SET: u32 = 16777232;
pub const CASS_ERROR_LIB_INVALID_STATEMENT_TYPE: u32 = 16777233;
pub const CASS_ERROR_LIB_NAME_DOES_NOT_EXIST: u32 = 16777234;
pub const CASS_ERROR_LIB_UNABLE_TO_DETERMINE_PROTOCOL: u32 =
    16777235;
pub const CASS_ERROR_LIB_NULL_VALUE: u32 = 16777236;
pub const CASS_ERROR_LIB_NOT_IMPLEMENTED: u32 = 16777237;
pub const CASS_ERROR_LIB_UNABLE_TO_CONNECT: u32 = 16777238;
pub const CASS_ERROR_LIB_UNABLE_TO_CLOSE: u32 = 16777239;
pub const CASS_ERROR_SERVER_SERVER_ERROR: u32 = 33554432;
pub const CASS_ERROR_SERVER_PROTOCOL_ERROR: u32 = 33554442;
pub const CASS_ERROR_SERVER_BAD_CREDENTIALS: u32 = 33554688;
pub const CASS_ERROR_SERVER_UNAVAILABLE: u32 = 33558528;
pub const CASS_ERROR_SERVER_OVERLOADED: u32 = 33558529;
pub const CASS_ERROR_SERVER_IS_BOOTSTRAPPING: u32 = 33558530;
pub const CASS_ERROR_SERVER_TRUNCATE_ERROR: u32 = 33558531;
pub const CASS_ERROR_SERVER_WRITE_TIMEOUT: u32 = 33558784;
pub const CASS_ERROR_SERVER_READ_TIMEOUT: u32 = 33559040;
pub const CASS_ERROR_SERVER_SYNTAX_ERROR: u32 = 33562624;
pub const CASS_ERROR_SERVER_UNAUTHORIZED: u32 = 33562880;
pub const CASS_ERROR_SERVER_INVALID_QUERY: u32 = 33563136;
pub const CASS_ERROR_SERVER_CONFIG_ERROR: u32 = 33563392;
pub const CASS_ERROR_SERVER_ALREADY_EXISTS: u32 = 33563648;
pub const CASS_ERROR_SERVER_UNPREPARED: u32 = 33563904;
pub const CASS_ERROR_SSL_INVALID_CERT: u32 = 50331649;
pub const CASS_ERROR_SSL_INVALID_PRIVATE_KEY: u32 = 50331650;
pub const CASS_ERROR_SSL_NO_PEER_CERT: u32 = 50331651;
pub const CASS_ERROR_SSL_INVALID_PEER_CERT: u32 = 50331652;
pub const CASS_ERROR_SSL_IDENTITY_MISMATCH: u32 = 50331653;
pub const CASS_ERROR_LAST_ENTRY: u32 = 50331654;
pub type CassError = Enum_CassError_;
pub type CassFutureCallback =
    ::std::option::Option<extern "C" fn(future: *mut CassFuture,
                                        data: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CassLogMessage_ {
    pub time_ms: cass_uint64_t,
    pub severity: CassLogLevel,
    pub file: *const i8,
    pub line: i32,
    pub function: *const i8,
    pub message: [i8; 256usize],
}
impl ::std::clone::Clone for Struct_CassLogMessage_ {
    fn clone(&self) -> Struct_CassLogMessage_ { *self }
}
impl ::std::default::Default for Struct_CassLogMessage_ {
    fn default() -> Struct_CassLogMessage_ { unsafe { ::std::mem::zeroed() } }
}
pub type CassLogMessage = Struct_CassLogMessage_;
pub type CassLogCallback =
    ::std::option::Option<extern "C" fn(message: *const CassLogMessage,
                                        data: *mut ::libc::c_void) -> ()>;
#[link(name = "cassandra")]
extern "C" {
    pub fn cass_cluster_new() -> *mut CassCluster;
    pub fn cass_cluster_free(cluster: *mut CassCluster) -> ();
    pub fn cass_cluster_set_contact_points(cluster: *mut CassCluster,
                                           contact_points:
                                               *const i8)
     -> CassError;
    pub fn cass_cluster_set_contact_points_n(cluster: *mut CassCluster,
                                             contact_points:
                                                 *const i8,
                                             contact_points_length: size_t)
     -> CassError;
    pub fn cass_cluster_set_port(cluster: *mut CassCluster,
                                 port: i32) -> CassError;
    pub fn cass_cluster_set_ssl(cluster: *mut CassCluster, ssl: *mut CassSsl)
     -> ();
    pub fn cass_cluster_set_protocol_version(cluster: *mut CassCluster,
                                             protocol_version: i32)
     -> CassError;
    pub fn cass_cluster_set_num_threads_io(cluster: *mut CassCluster,
                                           num_threads: u32)
     -> CassError;
    pub fn cass_cluster_set_queue_size_io(cluster: *mut CassCluster,
                                          queue_size: u32)
     -> CassError;
    pub fn cass_cluster_set_queue_size_event(cluster: *mut CassCluster,
                                             queue_size: u32)
     -> CassError;
    pub fn cass_cluster_set_queue_size_log(cluster: *mut CassCluster,
                                           queue_size: u32)
     -> CassError;
    pub fn cass_cluster_set_core_connections_per_host(cluster:
                                                          *mut CassCluster,
                                                      num_connections:
                                                          u32)
     -> CassError;
    pub fn cass_cluster_set_max_connections_per_host(cluster:
                                                         *mut CassCluster,
                                                     num_connections:
                                                         u32)
     -> CassError;
    pub fn cass_cluster_set_reconnect_wait_time(cluster: *mut CassCluster,
                                                wait_time: u32)
     -> ();
    pub fn cass_cluster_set_max_concurrent_creation(cluster: *mut CassCluster,
                                                    num_connections:
                                                        u32)
     -> CassError;
    pub fn cass_cluster_set_max_concurrent_requests_threshold(cluster:
                                                                  *mut CassCluster,
                                                              num_requests:
                                                                  u32)
     -> CassError;
    pub fn cass_cluster_set_max_requests_per_flush(cluster: *mut CassCluster,
                                                   num_requests:
                                                       u32)
     -> CassError;
    pub fn cass_cluster_set_write_bytes_high_water_mark(cluster:
                                                            *mut CassCluster,
                                                        num_bytes:
                                                            u32)
     -> CassError;
    pub fn cass_cluster_set_write_bytes_low_water_mark(cluster:
                                                           *mut CassCluster,
                                                       num_bytes:
                                                           u32)
     -> CassError;
    pub fn cass_cluster_set_pending_requests_high_water_mark(cluster:
                                                                 *mut CassCluster,
                                                             num_requests:
                                                                 u32)
     -> CassError;
    pub fn cass_cluster_set_pending_requests_low_water_mark(cluster:
                                                                *mut CassCluster,
                                                            num_requests:
                                                                u32)
     -> CassError;
    pub fn cass_cluster_set_connect_timeout(cluster: *mut CassCluster,
                                            timeout_ms: u32) -> ();
    pub fn cass_cluster_set_request_timeout(cluster: *mut CassCluster,
                                            timeout_ms: u32) -> ();
    pub fn cass_cluster_set_credentials(cluster: *mut CassCluster,
                                        username: *const i8,
                                        password: *const i8)
     -> ();
    pub fn cass_cluster_set_credentials_n(cluster: *mut CassCluster,
                                          username: *const i8,
                                          username_length: size_t,
                                          password: *const i8,
                                          password_length: size_t) -> ();
    pub fn cass_cluster_set_load_balance_round_robin(cluster:
                                                         *mut CassCluster)
     -> ();
    pub fn cass_cluster_set_load_balance_dc_aware(cluster: *mut CassCluster,
                                                  local_dc:
                                                      *const i8,
                                                  used_hosts_per_remote_dc:
                                                      u32,
                                                  allow_remote_dcs_for_local_cl:
                                                      cass_bool_t)
     -> CassError;
    pub fn cass_cluster_set_load_balance_dc_aware_n(cluster: *mut CassCluster,
                                                    local_dc:
                                                        *const i8,
                                                    local_dc_length: size_t,
                                                    used_hosts_per_remote_dc:
                                                        u32,
                                                    allow_remote_dcs_for_local_cl:
                                                        cass_bool_t)
     -> CassError;
    pub fn cass_cluster_set_token_aware_routing(cluster: *mut CassCluster,
                                                enabled: cass_bool_t) -> ();
    pub fn cass_cluster_set_latency_aware_routing(cluster: *mut CassCluster,
                                                  enabled: cass_bool_t) -> ();
    pub fn cass_cluster_set_latency_aware_routing_settings(cluster:
                                                               *mut CassCluster,
                                                           exclusion_threshold:
                                                               cass_double_t,
                                                           scale_ms:
                                                               cass_uint64_t,
                                                           retry_period_ms:
                                                               cass_uint64_t,
                                                           update_rate_ms:
                                                               cass_uint64_t,
                                                           min_measured:
                                                               cass_uint64_t)
     -> ();
    pub fn cass_cluster_set_tcp_nodelay(cluster: *mut CassCluster,
                                        enabled: cass_bool_t) -> ();
    pub fn cass_cluster_set_tcp_keepalive(cluster: *mut CassCluster,
                                          enabled: cass_bool_t,
                                          delay_secs: u32) -> ();
    pub fn cass_session_new() -> *mut CassSession;
    pub fn cass_session_free(session: *mut CassSession) -> ();
    pub fn cass_session_connect(session: *mut CassSession,
                                cluster: *const CassCluster)
     -> *mut CassFuture;
    pub fn cass_session_connect_keyspace(session: *mut CassSession,
                                         cluster: *const CassCluster,
                                         keyspace: *const i8)
     -> *mut CassFuture;
    pub fn cass_session_connect_keyspace_n(session: *mut CassSession,
                                           cluster: *const CassCluster,
                                           keyspace: *const i8,
                                           keyspace_length: size_t)
     -> *mut CassFuture;
    pub fn cass_session_close(session: *mut CassSession) -> *mut CassFuture;
    pub fn cass_session_prepare(session: *mut CassSession,
                                query: *const i8)
     -> *mut CassFuture;
    pub fn cass_session_prepare_n(session: *mut CassSession,
                                  query: *const i8,
                                  query_length: size_t) -> *mut CassFuture;
    pub fn cass_session_execute(session: *mut CassSession,
                                statement: *const CassStatement)
     -> *mut CassFuture;
    pub fn cass_session_execute_batch(session: *mut CassSession,
                                      batch: *const CassBatch)
     -> *mut CassFuture;
    pub fn cass_session_get_schema(session: *mut CassSession)
     -> *const CassSchema;
    pub fn cass_session_get_metrics(session: *mut CassSession,
                                    output: *mut CassMetrics) -> ();
    pub fn cass_schema_free(schema: *const CassSchema) -> ();
    pub fn cass_schema_get_keyspace(schema: *const CassSchema,
                                    keyspace: *const i8)
     -> *const CassSchemaMeta;
    pub fn cass_schema_get_keyspace_n(schema: *const CassSchema,
                                      keyspace: *const i8,
                                      keyspace_length: size_t)
     -> *const CassSchemaMeta;
    pub fn cass_schema_meta_type(meta: *const CassSchemaMeta)
     -> CassSchemaMetaType;
    pub fn cass_schema_meta_get_entry(meta: *const CassSchemaMeta,
                                      name: *const i8)
     -> *const CassSchemaMeta;
    pub fn cass_schema_meta_get_entry_n(meta: *const CassSchemaMeta,
                                        name: *const i8,
                                        name_length: size_t)
     -> *const CassSchemaMeta;
    pub fn cass_schema_meta_get_field(meta: *const CassSchemaMeta,
                                      name: *const i8)
     -> *const CassSchemaMetaField;
    pub fn cass_schema_meta_get_field_n(meta: *const CassSchemaMeta,
                                        name: *const i8,
                                        name_length: size_t)
     -> *const CassSchemaMetaField;
    pub fn cass_schema_meta_field_name(field: *const CassSchemaMetaField,
                                       name: *mut *const i8,
                                       name_length: *mut size_t) -> ();
    pub fn cass_schema_meta_field_value(field: *const CassSchemaMetaField)
     -> *const CassValue;
    pub fn cass_ssl_new() -> *mut CassSsl;
    pub fn cass_ssl_free(ssl: *mut CassSsl) -> ();
    pub fn cass_ssl_add_trusted_cert(ssl: *mut CassSsl,
                                     cert: *const i8)
     -> CassError;
    pub fn cass_ssl_add_trusted_cert_n(ssl: *mut CassSsl,
                                       cert: *const i8,
                                       arg1: size_t) -> CassError;
    pub fn cass_ssl_set_verify_flags(ssl: *mut CassSsl, flags: i32)
     -> ();
    pub fn cass_ssl_set_cert(ssl: *mut CassSsl, cert: *const i8)
     -> CassError;
    pub fn cass_ssl_set_cert_n(ssl: *mut CassSsl, cert: *const i8,
                               cert_length: size_t) -> CassError;
    pub fn cass_ssl_set_private_key(ssl: *mut CassSsl,
                                    key: *const i8,
                                    password: *const i8)
     -> CassError;
    pub fn cass_ssl_set_private_key_n(ssl: *mut CassSsl,
                                      key: *const i8,
                                      key_length: size_t,
                                      password: *const i8,
                                      password_length: size_t) -> CassError;
    pub fn cass_future_free(future: *mut CassFuture) -> ();
    pub fn cass_future_set_callback(future: *mut CassFuture,
                                    callback: CassFutureCallback,
                                    data: *mut ::libc::c_void) -> CassError;
    pub fn cass_future_ready(future: *mut CassFuture) -> cass_bool_t;
    pub fn cass_future_wait(future: *mut CassFuture) -> ();
    pub fn cass_future_wait_timed(future: *mut CassFuture,
                                  timeout_us: cass_duration_t) -> cass_bool_t;
    pub fn cass_future_get_result(future: *mut CassFuture)
     -> *const CassResult;
    pub fn cass_future_get_prepared(future: *mut CassFuture)
     -> *const CassPrepared;
    pub fn cass_future_error_code(future: *mut CassFuture) -> CassError;
    pub fn cass_future_error_message(future: *mut CassFuture,
                                     message: *mut *const i8,
                                     message_length: *mut size_t) -> ();
    pub fn cass_statement_new(query: *const i8,
                              parameter_count: size_t) -> *mut CassStatement;
    pub fn cass_statement_new_n(query: *const i8,
                                query_length: size_t, parameter_count: size_t)
     -> *mut CassStatement;
    pub fn cass_statement_free(statement: *mut CassStatement) -> ();
    pub fn cass_statement_add_key_index(statement: *mut CassStatement,
                                        index: size_t) -> CassError;
    pub fn cass_statement_set_keyspace(statement: *mut CassStatement,
                                       keyspace: *const i8)
     -> CassError;
    pub fn cass_statement_set_keyspace_n(statement: *mut CassStatement,
                                         keyspace: *const i8,
                                         keyspace_length: size_t)
     -> CassError;
    pub fn cass_statement_set_consistency(statement: *mut CassStatement,
                                          consistency: CassConsistency)
     -> CassError;
    pub fn cass_statement_set_serial_consistency(statement:
                                                     *mut CassStatement,
                                                 serial_consistency:
                                                     CassConsistency)
     -> CassError;
    pub fn cass_statement_set_paging_size(statement: *mut CassStatement,
                                          page_size: i32)
     -> CassError;
    pub fn cass_statement_set_paging_state(statement: *mut CassStatement,
                                           result: *const CassResult)
     -> CassError;
    pub fn cass_statement_bind_null(statement: *mut CassStatement,
                                    index: size_t) -> CassError;
    pub fn cass_statement_bind_int32(statement: *mut CassStatement,
                                     index: size_t, value: cass_int32_t)
     -> CassError;
    pub fn cass_statement_bind_int64(statement: *mut CassStatement,
                                     index: size_t, value: cass_int64_t)
     -> CassError;
    pub fn cass_statement_bind_float(statement: *mut CassStatement,
                                     index: size_t, value: cass_float_t)
     -> CassError;
    pub fn cass_statement_bind_double(statement: *mut CassStatement,
                                      index: size_t, value: cass_double_t)
     -> CassError;
    pub fn cass_statement_bind_bool(statement: *mut CassStatement,
                                    index: size_t, value: cass_bool_t)
     -> CassError;
    pub fn cass_statement_bind_string(statement: *mut CassStatement,
                                      index: size_t,
                                      value: *const i8)
     -> CassError;
    pub fn cass_statement_bind_string_n(statement: *mut CassStatement,
                                        index: size_t,
                                        value: *const i8,
                                        value_length: size_t) -> CassError;
    pub fn cass_statement_bind_bytes(statement: *mut CassStatement,
                                     index: size_t,
                                     value: *const cass_uint8_t,
                                     value_size: size_t) -> CassError;
    pub fn cass_statement_bind_uuid(statement: *mut CassStatement,
                                    index: size_t, value: CassUuid)
     -> CassError;
    pub fn cass_statement_bind_inet(statement: *mut CassStatement,
                                    index: size_t, value: CassInet)
     -> CassError;
    pub fn cass_statement_bind_decimal(statement: *mut CassStatement,
                                       index: size_t,
                                       varint: *const cass_byte_t,
                                       varint_size: size_t,
                                       scale: cass_int32_t) -> CassError;
    pub fn cass_statement_bind_custom(statement: *mut CassStatement,
                                      index: size_t, size: size_t,
                                      output: *mut *mut cass_byte_t)
     -> CassError;
    pub fn cass_statement_bind_collection(statement: *mut CassStatement,
                                          index: size_t,
                                          collection: *const CassCollection)
     -> CassError;
    pub fn cass_statement_bind_null_by_name(statement: *mut CassStatement,
                                            name: *const i8)
     -> CassError;
    pub fn cass_statement_bind_null_by_name_n(statement: *mut CassStatement,
                                              name: *const i8,
                                              name_length: size_t)
     -> CassError;
    pub fn cass_statement_bind_int32_by_name(statement: *mut CassStatement,
                                             name: *const i8,
                                             value: cass_int32_t)
     -> CassError;
    pub fn cass_statement_bind_int32_by_name_n(statement: *mut CassStatement,
                                               name: *const i8,
                                               name_length: size_t,
                                               value: cass_int32_t)
     -> CassError;
    pub fn cass_statement_bind_int64_by_name(statement: *mut CassStatement,
                                             name: *const i8,
                                             value: cass_int64_t)
     -> CassError;
    pub fn cass_statement_bind_int64_by_name_n(statement: *mut CassStatement,
                                               name: *const i8,
                                               name_length: size_t,
                                               value: cass_int64_t)
     -> CassError;
    pub fn cass_statement_bind_float_by_name(statement: *mut CassStatement,
                                             name: *const i8,
                                             value: cass_float_t)
     -> CassError;
    pub fn cass_statement_bind_float_by_name_n(statement: *mut CassStatement,
                                               name: *const i8,
                                               name_length: size_t,
                                               value: cass_float_t)
     -> CassError;
    pub fn cass_statement_bind_double_by_name(statement: *mut CassStatement,
                                              name: *const i8,
                                              value: cass_double_t)
     -> CassError;
    pub fn cass_statement_bind_double_by_name_n(statement: *mut CassStatement,
                                                name: *const i8,
                                                name_length: size_t,
                                                value: cass_double_t)
     -> CassError;
    pub fn cass_statement_bind_bool_by_name(statement: *mut CassStatement,
                                            name: *const i8,
                                            value: cass_bool_t) -> CassError;
    pub fn cass_statement_bind_bool_by_name_n(statement: *mut CassStatement,
                                              name: *const i8,
                                              name_length: size_t,
                                              value: cass_bool_t)
     -> CassError;
    pub fn cass_statement_bind_string_by_name(statement: *mut CassStatement,
                                              name: *const i8,
                                              value: *const i8)
     -> CassError;
    pub fn cass_statement_bind_string_by_name_n(statement: *mut CassStatement,
                                                name: *const i8,
                                                name_length: size_t,
                                                value: *const i8,
                                                value_length: size_t)
     -> CassError;
    pub fn cass_statement_bind_bytes_by_name(statement: *mut CassStatement,
                                             name: *const i8,
                                             value: *mut cass_uint8_t,
                                             value_size: size_t) -> CassError;
    pub fn cass_statement_bind_bytes_by_name_n(statement: *mut CassStatement,
                                               name: *const i8,
                                               name_length: size_t,
                                               value: *mut cass_uint8_t,
                                               value_size: size_t)
     -> CassError;
    pub fn cass_statement_bind_uuid_by_name(statement: *mut CassStatement,
                                            name: *const i8,
                                            value: CassUuid) -> CassError;
    pub fn cass_statement_bind_uuid_by_name_n(statement: *mut CassStatement,
                                              name: *const i8,
                                              name_length: size_t,
                                              value: CassUuid) -> CassError;
    pub fn cass_statement_bind_inet_by_name(statement: *mut CassStatement,
                                            name: *const i8,
                                            value: CassInet) -> CassError;
    pub fn cass_statement_bind_inet_by_name_n(statement: *mut CassStatement,
                                              name: *const i8,
                                              name_length: size_t,
                                              value: CassInet) -> CassError;
    pub fn cass_statement_bind_decimal_by_name(statement: *mut CassStatement,
                                               name: *const i8,
                                               varint: *const cass_byte_t,
                                               varint_size: size_t,
                                               scale: cass_int32_t)
     -> CassError;
    pub fn cass_statement_bind_decimal_by_name_n(statement:
                                                     *mut CassStatement,
                                                 name: *const i8,
                                                 name_length: size_t,
                                                 varint: *const cass_byte_t,
                                                 varint_size: size_t,
                                                 scale: cass_int32_t)
     -> CassError;
    pub fn cass_statement_bind_custom_by_name(statement: *mut CassStatement,
                                              name: *const i8,
                                              size: size_t,
                                              output: *mut *mut cass_byte_t)
     -> CassError;
    pub fn cass_statement_bind_custom_by_name_n(statement: *mut CassStatement,
                                                name: *const i8,
                                                name_length: size_t,
                                                size: size_t,
                                                output: *mut *mut cass_byte_t)
     -> CassError;
    pub fn cass_statement_bind_collection_by_name(statement:
                                                      *mut CassStatement,
                                                  name: *const i8,
                                                  collection:
                                                      *const CassCollection)
     -> CassError;
    pub fn cass_statement_bind_collection_by_name_n(statement:
                                                        *mut CassStatement,
                                                    name:
                                                        *const i8,
                                                    name_length: size_t,
                                                    collection:
                                                        *const CassCollection)
     -> CassError;
    pub fn cass_prepared_free(prepared: *const CassPrepared) -> ();
    pub fn cass_prepared_bind(prepared: *const CassPrepared)
     -> *mut CassStatement;
    pub fn cass_batch_new(_type: CassBatchType) -> *mut CassBatch;
    pub fn cass_batch_free(batch: *mut CassBatch) -> ();
    pub fn cass_batch_set_consistency(batch: *mut CassBatch,
                                      consistency: CassConsistency)
     -> CassError;
    pub fn cass_batch_add_statement(batch: *mut CassBatch,
                                    statement: *mut CassStatement)
     -> CassError;
    pub fn cass_collection_new(_type: CassCollectionType, item_count: size_t)
     -> *mut CassCollection;
    pub fn cass_collection_free(collection: *mut CassCollection) -> ();
    pub fn cass_collection_append_int32(collection: *mut CassCollection,
                                        value: cass_int32_t) -> CassError;
    pub fn cass_collection_append_int64(collection: *mut CassCollection,
                                        value: cass_int64_t) -> CassError;
    pub fn cass_collection_append_float(collection: *mut CassCollection,
                                        value: cass_float_t) -> CassError;
    pub fn cass_collection_append_double(collection: *mut CassCollection,
                                         value: cass_double_t) -> CassError;
    pub fn cass_collection_append_bool(collection: *mut CassCollection,
                                       value: cass_bool_t) -> CassError;
    pub fn cass_collection_append_string(collection: *mut CassCollection,
                                         value: *const i8)
     -> CassError;
    pub fn cass_collection_append_string_n(collection: *mut CassCollection,
                                           value: *const i8,
                                           value_length: size_t) -> CassError;
    pub fn cass_collection_append_bytes(collection: *mut CassCollection,
                                        value: *const cass_byte_t,
                                        value_size: size_t) -> CassError;
    pub fn cass_collection_append_uuid(collection: *mut CassCollection,
                                       value: CassUuid) -> CassError;
    pub fn cass_collection_append_inet(collection: *mut CassCollection,
                                       value: CassInet) -> CassError;
    pub fn cass_collection_append_decimal(collection: *mut CassCollection,
                                          varint: *const cass_byte_t,
                                          varint_size: size_t,
                                          scale: cass_int32_t) -> CassError;
    pub fn cass_result_free(result: *const CassResult) -> ();
    pub fn cass_result_row_count(result: *const CassResult) -> size_t;
    pub fn cass_result_column_count(result: *const CassResult) -> size_t;
    pub fn cass_result_column_name(result: *const CassResult, index: size_t,
                                   name: *mut *const i8,
                                   name_length: *mut size_t) -> CassError;
    pub fn cass_result_column_type(result: *const CassResult, index: size_t)
     -> CassValueType;
    pub fn cass_result_first_row(result: *const CassResult) -> *const CassRow;
    pub fn cass_result_has_more_pages(result: *const CassResult)
     -> cass_bool_t;
    pub fn cass_iterator_free(iterator: *mut CassIterator) -> ();
    pub fn cass_iterator_type(iterator: *mut CassIterator)
     -> CassIteratorType;
    pub fn cass_iterator_from_result(result: *const CassResult)
     -> *mut CassIterator;
    pub fn cass_iterator_from_row(row: *const CassRow) -> *mut CassIterator;
    pub fn cass_iterator_from_collection(value: *const CassValue)
     -> *mut CassIterator;
    pub fn cass_iterator_from_map(value: *const CassValue)
     -> *mut CassIterator;
    pub fn cass_iterator_from_schema(schema: *const CassSchema)
     -> *mut CassIterator;
    pub fn cass_iterator_from_schema_meta(meta: *const CassSchemaMeta)
     -> *mut CassIterator;
    pub fn cass_iterator_fields_from_schema_meta(meta: *const CassSchemaMeta)
     -> *mut CassIterator;
    pub fn cass_iterator_next(iterator: *mut CassIterator) -> cass_bool_t;
    pub fn cass_iterator_get_row(iterator: *mut CassIterator)
     -> *const CassRow;
    pub fn cass_iterator_get_column(iterator: *mut CassIterator)
     -> *const CassValue;
    pub fn cass_iterator_get_value(iterator: *mut CassIterator)
     -> *const CassValue;
    pub fn cass_iterator_get_map_key(iterator: *mut CassIterator)
     -> *const CassValue;
    pub fn cass_iterator_get_map_value(iterator: *mut CassIterator)
     -> *const CassValue;
    pub fn cass_iterator_get_schema_meta(iterator: *mut CassIterator)
     -> *const CassSchemaMeta;
    pub fn cass_iterator_get_schema_meta_field(iterator: *mut CassIterator)
     -> *const CassSchemaMetaField;
    pub fn cass_row_get_column(row: *const CassRow, index: size_t)
     -> *const CassValue;
    pub fn cass_row_get_column_by_name(row: *const CassRow,
                                       name: *const i8)
     -> *const CassValue;
    pub fn cass_row_get_column_by_name_n(row: *const CassRow,
                                         name: *const i8,
                                         name_length: size_t)
     -> *const CassValue;
    pub fn cass_value_get_int32(value: *const CassValue,
                                output: *mut cass_int32_t) -> CassError;
    pub fn cass_value_get_int64(value: *const CassValue,
                                output: *mut cass_int64_t) -> CassError;
    pub fn cass_value_get_float(value: *const CassValue,
                                output: *mut cass_float_t) -> CassError;
    pub fn cass_value_get_double(value: *const CassValue,
                                 output: *mut cass_double_t) -> CassError;
    pub fn cass_value_get_bool(value: *const CassValue,
                               output: *mut cass_bool_t) -> CassError;
    pub fn cass_value_get_uuid(value: *const CassValue, output: *mut CassUuid)
     -> CassError;
    pub fn cass_value_get_inet(value: *const CassValue, output: *mut CassInet)
     -> CassError;
    pub fn cass_value_get_string(value: *const CassValue,
                                 output: *mut *const i8,
                                 output_size: *mut size_t) -> CassError;
    pub fn cass_value_get_bytes(value: *const CassValue,
                                output: *mut *const cass_byte_t,
                                output_size: *mut size_t) -> CassError;
    pub fn cass_value_get_decimal(value: *const CassValue,
                                  varint: *mut *const cass_byte_t,
                                  varint_size: *mut size_t,
                                  scale: *mut cass_int32_t) -> CassError;
    pub fn cass_value_type(value: *const CassValue) -> CassValueType;
    pub fn cass_value_is_null(value: *const CassValue) -> cass_bool_t;
    pub fn cass_value_is_collection(value: *const CassValue) -> cass_bool_t;
    pub fn cass_value_item_count(collection: *const CassValue) -> size_t;
    pub fn cass_value_primary_sub_type(collection: *const CassValue)
     -> CassValueType;
    pub fn cass_value_secondary_sub_type(collection: *const CassValue)
     -> CassValueType;
    pub fn cass_uuid_gen_new() -> *mut CassUuidGen;
    pub fn cass_uuid_gen_new_with_node(node: cass_uint64_t)
     -> *mut CassUuidGen;
    pub fn cass_uuid_gen_free(uuid_gen: *mut CassUuidGen) -> ();
    pub fn cass_uuid_gen_time(uuid_gen: *mut CassUuidGen,
                              output: *mut CassUuid) -> ();
    pub fn cass_uuid_gen_random(uuid_gen: *mut CassUuidGen,
                                output: *mut CassUuid) -> ();
    pub fn cass_uuid_gen_from_time(uuid_gen: *mut CassUuidGen,
                                   timestamp: cass_uint64_t,
                                   output: *mut CassUuid) -> ();
    pub fn cass_uuid_min_from_time(time: cass_uint64_t, output: *mut CassUuid)
     -> ();
    pub fn cass_uuid_max_from_time(time: cass_uint64_t, output: *mut CassUuid)
     -> ();
    pub fn cass_uuid_timestamp(uuid: CassUuid) -> cass_uint64_t;
    pub fn cass_uuid_version(uuid: CassUuid) -> cass_uint8_t;
    pub fn cass_uuid_string(uuid: CassUuid, output: *mut i8)
     -> ();
    pub fn cass_uuid_from_string(str: *const i8,
                                 output: *mut CassUuid) -> CassError;
    pub fn cass_uuid_from_string_n(str: *const i8,
                                   str_length: size_t, output: *mut CassUuid)
     -> CassError;
    pub fn cass_error_desc(error: CassError) -> *const i8;
    pub fn cass_log_cleanup() -> ();
    pub fn cass_log_set_level(log_level: CassLogLevel) -> ();
    pub fn cass_log_set_callback(callback: CassLogCallback,
                                 data: *mut ::libc::c_void) -> ();
    pub fn cass_log_set_queue_size(queue_size: size_t) -> ();
    pub fn cass_log_level_string(log_level: CassLogLevel)
     -> *const i8;
    pub fn cass_inet_init_v4(address: *const cass_uint8_t) -> CassInet;
    pub fn cass_inet_init_v6(address: *const cass_uint8_t) -> CassInet;
    pub fn cass_inet_string(inet: CassInet, output: *mut i8)
     -> ();
    pub fn cass_inet_from_string(str: *const i8,
                                 output: *mut CassInet) -> CassError;
    pub fn cass_inet_from_string_n(str: *const i8,
                                   str_length: size_t, output: *mut CassInet)
     -> CassError;
}